local rendercam = require("rendercam.rendercam")
local vp = rendercam.viewport

local IDENTITY_MATRIX = vmath.matrix4()
local CLEAR_COLOR = hash("clear_color")
local WINDOW_RESIZED = hash("window_resized")
local UPDATE_WINDOW = hash("update window")


local function next_pot(num)
	local result = 1

	while num > result do
		result = bit.lshift(result, 1)
	end

	-- return result
	-- TODO: there is issue with vignette and other
	-- effects on UV coodtinates
	-- for now disabling this
	return num
end


local function update_window(self)
	-- Update game RT
	local pot_width = next_pot(render.get_window_width())
	local pot_height = next_pot(render.get_window_height())

	local color_params = {
		format = render.FORMAT_RGBA,
		width = pot_width,
		height = pot_height
	}

	local depth_params = {
		format = render.FORMAT_DEPTH,
		width = pot_width,
		height = pot_height
	}

	local target_params = {
		[render.BUFFER_COLOR_BIT] = color_params,
		[render.BUFFER_DEPTH_BIT] = depth_params
	}
	self.game_rt = render.render_target("game", target_params)

	rendercam.update_window(render.get_window_width(), render.get_window_height())
	self.gui_proj = vmath.matrix4_orthographic(0, rendercam.window.x, 0, rendercam.window.y, -1, 1)
end


function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.model_pred = render.predicate({"model"})
	self.particle_pred = render.predicate({"particle"})
	self.back_particle_pred = render.predicate({"back_particle"})

	self.effect_default = render.predicate({"default"})

	self.clear_color = vmath.vector4(0)

	rendercam.configWin.x = render.get_width()
	rendercam.configWin.y = render.get_height()
	rendercam.update_window_size(render.get_window_width(), render.get_window_height())

	update_window(self)
end


local function default_render(self)
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	render.set_viewport(vp.x, vp.y, vp.width, vp.height)

	render.set_view(rendercam.calculate_view())
	render.set_projection(rendercam.calculate_proj())

	-- Sprite and particle rendering
	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.draw(self.back_particle_pred)
	render.draw(self.tile_pred)
	render.draw(self.particle_pred)

	-- Model rendering
	--[[
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.enable_state(render.STATE_CULL_FACE)
	render.enable_state(render.STATE_DEPTH_TEST)
	render.set_depth_mask(true)
	render.draw(self.model_pred)
	--]]
end


local function render_to_render_target(self)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color})

	render.set_viewport(0, 0, next_pot(vp.width), next_pot(vp.height))
	render.set_view(IDENTITY_MATRIX)
	render.set_projection(IDENTITY_MATRIX)
end


local function draw_render_target(self)
	render.enable_texture(0, self.game_rt, render.BUFFER_COLOR_BIT)
	render.draw(self.effect_default)
	render.disable_texture(0, self.game_rt)
end


local function draw_gui(self)
	-- Debug rendering - physics debug, draw_line
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.draw_debug3d()

	-- GUI Rendering
	render.set_viewport(0, 0, rendercam.window.x, rendercam.window.y)
	render.set_view(IDENTITY_MATRIX)
	render.set_projection(self.gui_proj) -- gui_proj only calculated on update_window

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred) -- Includes debug text from "draw_text" messages.
	render.disable_state(render.STATE_STENCIL_TEST)
end


function update(self)
	render.enable_render_target(self.game_rt)
	default_render(self)
	render.disable_render_target(self.game_rt)

	render_to_render_target(self)
	draw_render_target(self)
	draw_gui(self)
end


function on_message(self, message_id, message)
	if message_id == CLEAR_COLOR then
		self.clear_color = message.color
	elseif message_id == WINDOW_RESIZED then -- sent by engine
		update_window(self)
	elseif message_id == UPDATE_WINDOW then -- sent by rendercam when a camera is activated ("window_resized" engine message requires data)
		update_window(self)
	end
end
