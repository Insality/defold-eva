local eva = require("eva.eva")
local eva_const = require("eva.const")
local broadcast = require("eva.libs.broadcast")
local mapping = require("hextest.mapping.mapping")
local rendercam = require("rendercam.rendercam")


local function load_tiled_map(self, map_path)
	local map = eva.utils.load_json(map_path)
	local map_data = eva.tiled.load_map(map, mapping.make_object)

	self.map_data = map_data
end


function init(self)
	msg.post(".", "acquire_input_focus")

	--[ Camera setup example
	eva.camera.set_camera("main:/camera", go.get("main:/camera#script", "viewArea"))
	eva.camera.set_zoom_borders(vmath.vector3(0.3, 0.8, 0), vmath.vector3(0.2, 0.87, 0))
	--]]

	eva.quests.start_quests()

	broadcast.register(eva_const.EVENT.TIMER_TRIGGER, function(_, message)
		eva.timers.clear(message.params.slot_id)
	end)
	load_tiled_map(self, "/resources/tiled/hextest.json")
	eva.render.set_clear_color(vmath.vector4(0.07))

	local x, y = eva.hexgrid.cell_to_pos(19, 19)
	eva.camera.set_position(x, y)
	local borders = vmath.vector4(x - 660, y-660, x+660, y+660)
	eva.camera.set_borders(borders * 0.9, borders)
end


function update(self, dt)
	eva.update(dt)
end


function on_input(self, action_id, action)
	eva.on_input(action_id, action)
	action.x, action.y = rendercam.screen_to_world_2d(action.screen_x, action.screen_y, nil, nil, true)
	msg.post("/cursor", "input", { action_id = action_id, action = action })

	if action.released then
		if action_id == hash("key_4") then
			eva.window.show("window_test")
		end
		if action_id == hash("key_5") then
			eva.window.show("window_shop")
		end
		if action_id == hash("key_6") then
			eva.window.show("window_popup")
		end
	end

	if action_id == hash("touch") and action.released then
		local x, y = rendercam.screen_to_world_2d(action.screen_x, action.screen_y, nil, nil, true)
		local i, j = eva.hexgrid.pos_to_cell(x, y)

		-- eva.tiled.delete_tile("hexes", i, j)
		-- eva.tiled.add_object("resources", x, y, 9)

		-- eva.sound.play("click")
		-- eva.tokens.add("money", 1)
		--[[ Timers zone
		local slot = "smelter.slot1"
		if eva.timers.get(slot) then
			local timer = eva.timers.get(slot)
			eva.timers.set_pause(slot, not timer.is_pause)
		else
			eva.timers.add(slot, "test_action", 4, true)
		end
		--]]
	end
end


function on_message(self, message_id, message, sender)
	eva.on_message(message_id, message, sender)
	broadcast.on_message(self, message_id, message, sender)
end