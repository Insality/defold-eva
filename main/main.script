go.property("map", hash("hex"))

local eva = require("eva.eva")
local mapping = require("hextest.mapping.mapping")
local rendercam = require("rendercam.rendercam")

local map_mapping = {
	[hash("hex")] = {
		"hexes", "/resources/tiled/hextest.json", "/map_spawner_hextest"
	},
	[hash("grid")] = {
		"grid", "/resources/tiled/gridtest.json", "/map_spawner_gridtest"
	},
	[hash("iso")] = {
		"iso_tileset", "/resources/tiled/isotest.json", "/map_spawner_isotest"
	}
}

local function get_spawner(prefix)
	prefix = prefix or ""
	return function(...)
		return mapping.make_object(prefix, ...)
	end
end

local function load_tiled_map(self, map_path)
	local map = eva.utils.load_json(map_path)
	local map_data = eva.tiled.load_map(map, get_spawner(map_mapping[go.get("#", "map")][3]))

	self.map_data = map_data

	eva.pathfinder.init_astar(self.map_data, function(x, y)
		local layer_name = map_mapping[go.get("#", "map")][1]
		local tile = eva.tiled.get_tile(layer_name, x, y)

		local cost = 1
		if not tile then
			cost = nil
		end

		return cost
	end, { diagonal = false })
end


function init(self)
	msg.post(".", "acquire_input_focus")

	--[ Camera setup example
	eva.camera.set_camera("/basic_map/camera", go.get("/basic_map/camera#script", "viewArea"))
	eva.camera.set_zoom_borders(vmath.vector3(0.3, 2, 0), vmath.vector3(0.2, 2.7, 0))
	--]]

	eva.quests.start_quests()

	load_tiled_map(self, map_mapping[go.get("#", "map")][2])

	eva.render.set_clear_color(vmath.vector4(0.07))
	local x, y = self.map_data.grid.cell_to_pos(19, 19)
	eva.camera.set_position(x, y)
	local borders = vmath.vector4(x - 1000, y - 1000, x + 1000, y + 1000)
	eva.camera.set_borders(borders * 0.9, borders)

	--eva.push.schedule(10, "Game", "text", "return", {hello = "data"})
end


function update(self, dt)
	eva.update(dt)
end


function on_input(self, action_id, action)
	eva.on_input(action_id, action)

	action.x, action.y = rendercam.screen_to_world_2d(action.screen_x, action.screen_y, nil, nil, true)
	msg.post("/basic_map/cursor", "input", { action_id = action_id, action = action })

	if action.released then
		if action_id == hash("key_4") then
			eva.window.show("window_test")
		end
		if action_id == hash("key_5") then
			eva.window.show("window_shop")
		end
		if action_id == hash("key_6") then
			eva.window.show("window_popup")
		end
		if action_id == hash("key_7") then
			eva.window.show_scene("scene_hex")
		end
		if action_id == hash("key_8") then
			eva.window.show_scene("scene_grid")
		end
		if action_id == hash("key_9") then
			eva.window.show_scene("scene_iso")
		end
	end

	if action_id == hash("touch") and action.released then
		local x, y = rendercam.screen_to_world_2d(action.screen_x, action.screen_y, nil, nil, true)
		local i, j = self.map_data.grid.pos_to_cell(x, y)

		x, y = self.map_data.grid.cell_to_pos(i, j)
		local path = eva.pathfinder.path(i, j, 19, 19)
		if path then
			factory.create("/basic_map/ingame_spawner#cursor", vmath.vector3(x, y, self.map_data.grid.get_z(y, 1)))

			eva.pathfinder.for_path(path, function(path_x, path_y, index)
				timer.delay(0.07 * index, false, function()
					local px, py = self.map_data.grid.cell_to_pos(path_x, path_y)
					factory.create("/basic_map/ingame_spawner#cursor", vmath.vector3(px, py, self.map_data.grid.get_z(py, 1)))
				end)
			end)
		end

		-- eva.tiled.delete_tile("hexes", i, j)
		-- eva.tiled.add_object("resources", x, y, 9)

		-- eva.sound.play("click")
		-- eva.token.add("money", 1)
		--[[ Timers zone
		local slot = "smelter.slot1"
		if eva.timers.get(slot) then
			local timer = eva.timers.get(slot)
			eva.timers.set_pause(slot, not timer.is_pause)
		else
			eva.timers.add(slot, "test_action", 4, true)
		end
		--]]
	end
end


function on_message(self, message_id, message, sender)
	eva.on_message(message_id, message, sender)
end